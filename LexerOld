class Automata: # O algo parecido
        def __init__(self, tuplaToken):
            self.tuplaToken = tuplaToken
            self.estados = []
            self.estadoInicial = None
            self.estadoActual = None

            self.crearEstadosNecesarios(tuplaToken[1])
            self.reset()

        def crearEstadosNecesarios(self, estados):

        def reset(self):
            self.estadoActual = self.estadoInicial

        def consume(self, char):
            self.estadoActual = self.estadoActual.input(char)

        def isActualAceptado(self):
            return self.estadoActual.isAceptado()

        def getTuplaToken(self):
            return self.tuplaToken


class Estado:
    def __init__(self, aceptado = False, transiciones = []):
        self.transiciones = transiciones
        self.aceptado = aceptado

    def input(self, char):
        return self.transiciones[char]

    def addTransicion(self, tuplaTransicion):
        self.transiciones[] = tuplaTransicion

    def isAceptado(self):
        return self.aceptado

def tokenizer(string): # Todoarranca aca
    automatas = createAutomatas()
    tokens = []
    for string in char:
        for automatas in x:
            if (automatas[x].isActualAceptado()):
                tokens[] = automatas[x].getTuplaToken()
                for automatas in y:
                    automatas[y].reset()
                break
            automatas[x].consume(char)

    return tokens


def createAutomatas():
    expresionesReservadas = []
    automatas =[]

    for expresionesReservadas in i:
        automatas[] = new Automata(expresionesReservadas[i])

    return automatas




# def lex (src)
#     tokens = []
#     src = src + ""
#     i = 0
#     start = 0
#     state = 0
#     Whille i < len(src):
#         c = src[i]
#         x = src[start: i + 1]
#         if state == 0:
#             if c.isspace():
#                 i +=  1
#                 state = 0
#             else:
#                 start = i
#                 state = 1
#         if state == 1:
#             if es_aceptado(x) or not c.isspace():
#                 i += 1
#                 state = 1
#             else:
#                 i -= 1
#                 state = 2
# #Make spaghetti code
# def es_aceptado(x):
#     candidatos = [TokenType
#         for (TokenType, afd)
#         in TT
#         if afd(x)
#         ]
#     if len(candidatos) > 0
#         return True
#     else:
#         return False
#
# return (True, candidatos[0])
